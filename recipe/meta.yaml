{% set version = "1.0.0" %}

package:
  name: eatpy
  version: {{ version }}

source:
  #git_url: https://github.com/BoldingBruggeman/eat.git
  #git_rev: seamless
  url: https://github.com/BoldingBruggeman/eat/releases/download/v{{ version }}/code-seamless.tar.gz
  sha256: 5e8c1b08deb35ceefe58dbf89b05a41993ddbd63e2806dce16b118450705af41   # generate with `openssl sha256 <file name>`
  patches:
  - ersem.patch     # work around gfortran 5.x bug (Windows toolchain)
  #- ogs.patch       # work around gfortran 5.x limited support for error stop (Windows toolchain)
  - datetime.patch  # work around lack of ucrtbase in old MinGW and need to link in c++ stdlib (Windows toolchain)

build:
  entry_points:
    - eat-gotm-gen = eatpy.models.gotm_generate_ensemble:main
  number: 2

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - {{ mpi }}                              # [build_platform != target_platform and mpi == "openmpi"]  As per https://conda-forge.org/docs/maintainer/knowledge_base/#cross-compilation-examples
    - cmake
    - make                                   # [not win]
    - {{ compiler('c') }}                    # [not win] NB on windows this would activate Visual Studio and make that the default C/C++ compiler
    - {{ compiler('fortran') }}              # [not win]
    - {{ compiler('m2w64_c') }}              # [win]
    - {{ compiler('m2w64_cxx') }}            # [win] for strptime.cpp included with datetime - Windows only
    - {{ compiler('m2w64_fortran') }}        # [win]
    - {{ stdlib("c") }}                      # [not win] on Windows this pulls in VS and causes cmake to use its cl.exe, which is incompatible with the m2w64 version of windres.exe
  host:
    - python {{ python }}
    - cython
    - pip
    - setuptools
    #- numpy>=1.17               # only needed if "cimport numpy" is done in a pyx file
    #- blas-devel                 # [not win] on Windows this resolves to MKL, which is not usable by mingw-w64
    #- openblas                   ## [win]
    - libpython                  # [win]
    - libblas
    - liblapack
    - netcdf-fortran
    - {{ mpi }}
    - mpi4py                     # because eatpy/_eat_filter_pdaf.pyx does "cimport mpi4py.xxx"
  run:
    - python
    - {{ pin_compatible('numpy') }}
    - mpi4py
    - netCDF4
    - pyyaml                      # for eatpy-gotm-gen
    - {{ mpi }}
    #- {{ pin_compatible('blas') }}         # [not win]
    #- libopenblas  # [win]
    #- libblas * *openblas
    - openblas
    - m2w64-gcc-libgfortran      # [win] NB m2w64-gcc-libs and m2w64-gcc-libs-core are added automatically by m2w64 compiler functions under build

test:
  requires:
    - openssh  # [mpi == 'openmpi']
  imports:
    - eatpy
  commands:
    - eat-gotm-gen -h
    - eat-gotm -h

about:
  home: https://github.com/BoldingBruggeman/eat
  summary: Ensemble and Assimilation Tool
  description: |
    EAT is a 1D testbed for physical-biogeochemical data assimilation
    in marine and freshwater systems
  license: GPL-2.0-only
  license_family: GPL
  license_file: LICENSE
  doc_url: https://github.com/BoldingBruggeman/eat/wiki
  dev_url: https://github.com/BoldingBruggeman/eat

extra:
  recipe-maintainers:
    - jornbr
    - bolding
